{"version":3,"sources":["textures/grass.jpg","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","mapDistanceToInternal","distance","grassTexture","TextureLoader","load","grassTextureImg","App","props","townCanvas","animationToken","camera","controls","scene","renderer","React","createRef","Scene","canvas","this","current","context","getContext","canvasBoundingRect","getBoundingClientRect","aspect","width","height","setUpRenderer","document","body","appendChild","VRButton","createButton","res","setupCamera","setupLighting","background","Color","fog","Fog","scale","set","setRegion","tiles","Array","keys","map","num","coordinates","x","y","Math","floor","setAnimationLoop","animate","cancelAnimationFrame","region","forEach","tile","idx","MeshStandardMaterial","color","baseMeshMaterial","MeshPhysicalMaterial","base","Mesh","BoxGeometry","add","translateX","translateZ","loader","GLTFLoader","dracoLoader","DRACOLoader","setDecoderPath","setDRACOLoader","gltf","translateY","console","log","xhr","loaded","total","error","update","render","d","PerspectiveCamera","OrbitControls","domElement","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","PI","autoRotate","autoRotateSpeed","position","lookAt","WebGLRenderer","setPixelRatio","setSize","xr","enabled","light","HemisphereLight","dirLight","DirectionalLight","multiplyScalar","setX","ref","className","Component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,mC,4QC4BrCC,EAAwB,SAACC,GAC7B,OAAO,IAA2BA,GAG9BC,GAAe,IAAIC,MAAgBC,KAAKC,KAgL/BC,E,kDAtKb,WAAYC,GAAY,IAAD,8BACrB,cAAMA,IARRC,gBAOuB,IANvBC,oBAMuB,IALvBC,YAKuB,IAJvBC,cAIuB,IAHvBC,WAGuB,IAFvBC,cAEuB,EAErB,EAAKL,WAAaM,IAAMC,YACxB,EAAKH,MAAQ,IAAII,KAHI,E,gEAMF,IAAD,OACZC,EAASC,KAAKV,WAAWW,QACzBC,EAAO,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAQI,WAAW,UACnC,GAAKJ,GAAWG,EAAhB,CAGA,IAAME,EAAqBL,EAAOM,wBAC5BC,EAASF,EAAmBG,MAAQH,EAAmBI,OAG7DR,KAAKL,SAAWK,KAAKS,cACnBV,EACAG,EACAE,GACAT,SACFe,SAASC,KAAKC,YAAYC,IAASC,aAAad,KAAKL,WACrD,IAAMoB,EAAMf,KAAKgB,YAAYV,EARnB,GAQ8BN,KAAKN,MAAOM,KAAKL,UACzDK,KAAKR,OAASuB,EAAIvB,OAClBQ,KAAKP,SAAWsB,EAAItB,SACpBO,KAAKiB,cAAcjB,KAAKN,OACxBM,KAAKN,MAAMwB,WAAa,IAAIC,IAAM,WAClCnB,KAAKN,MAAM0B,IAAM,IAAIC,IAAI,SAAU,EAAG,KACtCrB,KAAKN,MAAM4B,MAAMC,IAAI,GAAK,GAAK,IAE/BvB,KAAKwB,UAAU,CACbC,MAAO,YAAIC,MAAM,KAASC,QAAQC,KAAI,SAACC,GAAD,MAAU,CAC9CC,YAAa,CACXC,EAAIF,EAAM,GAAM,EAChBG,EAAGC,KAAKC,MAAML,EAAM,IAAM,SAIhC7B,KAAKL,SAASwC,kBAAiB,kBAAM,EAAKC,gB,6CAItCpC,KAAKT,gBACP8C,qBAAqBrC,KAAKT,kB,gCAIpB+C,GAAc,IAAD,OACrBA,EAAOb,MAAMc,SAAQ,SAACC,EAAWC,GACd,IAAIC,IAAqB,CACxCC,MAAO,YADT,IAIMC,EAAmB,IAAIC,IAAqB,CAChDjB,IAAK5C,IAED8D,EAAO,IAAIC,IACf,IAAIC,IA5ES,EA4EiB,GA5EjB,GA6EbJ,GAEF,EAAKlD,MAAMuD,IAAIH,GAEfA,EAAKI,WAAWpE,EAAsB0D,EAAKV,YAAYC,IACvDe,EAAKK,WAAWrE,EAAsB0D,EAAKV,YAAYE,OAIzD,IAAIoB,EAAS,IAAIC,IAEbC,EAAc,IAAIC,IACtBD,EAAYE,eAAe,4BAC3BJ,EAAOK,eAAeH,GAGtBF,EAAOlE,KAEL,4BAEA,SAACwE,GACCA,EAAKhE,MAAM4B,MAAMC,IAAI,GAAI,GAAI,IAC7BmC,EAAKhE,MAAMiE,YAAY,IACvBD,EAAKhE,MAAMwD,YAAY,IACvBQ,EAAKhE,MAAMyD,WAAW,MACtB,EAAKzD,MAAMuD,IAAIS,EAAKhE,OACpBkE,QAAQC,IAAI,cAGd,SAAUC,GACRF,QAAQC,IAAKC,EAAIC,OAASD,EAAIE,MAAS,IAAM,eAG/C,SAAUC,GACRL,QAAQC,IAAI,0B,gCAMhB7D,KAAKP,SAASyE,SACdlE,KAAKL,SAASwE,OAAOnE,KAAKN,MAAOM,KAAKR,U,kCAItCc,EACA8D,EACA1E,EACAC,GAEA,IAAMH,EAAS,IAAI6E,IAAkBD,EAAG9D,EAAQ,EAAG,KAC7Cb,EAAW,IAAI6E,IAAc9E,EAAQG,EAAS4E,YAcpD,OAbA9E,EAAS+E,eAAgB,EACzB/E,EAASgF,cAAgB,KACzBhF,EAASiF,oBAAqB,EAC9BjF,EAASkF,YAAc,IACvBlF,EAASmF,YAAc,IACvBnF,EAASoF,cAAgB5C,KAAK6C,GAAK,EACnCrF,EAASsF,YAAa,EACtBtF,EAASuF,gBAAkB,GAE3BxF,EAAOyF,SAAS1D,IAAI,GAAI,IAAK,IAC7B/B,EAAO0F,OAAOxF,EAAMuF,UACpBxF,EAASyE,SAEF,CACL1E,SACAC,c,oCAKFM,EACAG,EACAE,GAEA,IAAMT,EAAW,IAAIwF,KAAc,CACjCpF,SACAG,YASF,OALAP,EAASyF,cAAc,GAEvBzF,EAAS0F,QAAQjF,EAAmBG,MAAOH,EAAmBI,QAC9Db,EAAS2F,GAAGC,SAAU,EAEf,CACL5F,c,oCAIUD,GACZ,IACI8F,EAAQ,IAAIC,IADC,kBACmC,GACpD/F,EAAMuD,IAAIuC,GAEV,IAAIE,EAAW,IAAIC,IAJF,SAI6B,IAC9CD,EAAST,SAASW,eAAe,KACjCF,EAAST,SAASY,KAAK,KACvBnG,EAAMuD,IAAIyC,K,+BAIV,OAAO,4BAAQI,IAAK9F,KAAKV,WAAYyG,UAAU,mB,GA1KjCnG,IAAMoG,WCtBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASnC,OACP,kBAAC,IAAMoC,WAAP,KACE,kBAAC,EAAD,OAEF7F,SAAS8F,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACLL,QAAQK,MAAMA,EAAM+C,c","file":"static/js/main.bbe63334.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/grass.ff3d3727.jpg\";","import React from \"react\";\nimport {\n  Scene,\n  WebGLRenderer,\n  PerspectiveCamera,\n  HemisphereLight,\n  DirectionalLight,\n  Color,\n  Fog,\n  MeshStandardMaterial,\n  MeshPhysicalMaterial,\n  BoxGeometry,\n  TextureLoader,\n} from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { VRButton } from \"three/examples/jsm/webxr/VRButton.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\n\nimport \"./App.scss\";\nimport grassTextureImg from \"./textures/grass.jpg\";\nimport { Mesh } from \"three/src/objects/Mesh\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\n\nconst TileDiameter = 3;\nconst TileGap = 0.2;\nconst TilePadding = 0.4;\nconst BuildingHeight = 1 / 30;\n\nconst mapDistanceToInternal = (distance: number) => {\n  return (TileDiameter + TileGap) * distance;\n};\n\nconst grassTexture = new TextureLoader().load(grassTextureImg);\n\nclass App extends React.Component<{}> {\n  townCanvas: React.RefObject<HTMLCanvasElement>;\n  animationToken?: number;\n  camera: any;\n  controls: any;\n  scene: Scene;\n  renderer: any;\n\n  constructor(props: {}) {\n    super(props);\n    this.townCanvas = React.createRef();\n    this.scene = new Scene();\n  }\n\n  componentDidMount() {\n    const canvas = this.townCanvas.current;\n    const context = canvas?.getContext(\"webgl2\");\n    if (!canvas || !context) {\n      return;\n    }\n    const canvasBoundingRect = canvas.getBoundingClientRect();\n    const aspect = canvasBoundingRect.width / canvasBoundingRect.height;\n    const d = 18;\n\n    this.renderer = this.setUpRenderer(\n      canvas,\n      context,\n      canvasBoundingRect\n    ).renderer;\n    document.body.appendChild(VRButton.createButton(this.renderer));\n    const res = this.setupCamera(aspect, d, this.scene, this.renderer);\n    this.camera = res.camera;\n    this.controls = res.controls;\n    this.setupLighting(this.scene);\n    this.scene.background = new Color(\"#87CEEB\");\n    this.scene.fog = new Fog(0xffffff, 0, 200);\n    this.scene.scale.set(0.5, 0.5, 0.5);\n\n    this.setRegion({\n      tiles: [...Array(16 * 16).keys()].map((num) => ({\n        coordinates: {\n          x: (num % 16) - 16 / 2,\n          y: Math.floor(num / 16) - 16 / 2,\n        },\n      })),\n    });\n    this.renderer.setAnimationLoop(() => this.animate());\n  }\n\n  componentWillUnmount() {\n    if (this.animationToken) {\n      cancelAnimationFrame(this.animationToken);\n    }\n  }\n\n  setRegion(region: any) {\n    region.tiles.forEach((tile: any, idx: number) => {\n      const material = new MeshStandardMaterial({\n        color: \"#eeeeee\",\n      });\n      // Add the base for the tile\n      const baseMeshMaterial = new MeshPhysicalMaterial({\n        map: grassTexture,\n      });\n      const base = new Mesh(\n        new BoxGeometry(TileDiameter, 0.1, TileDiameter),\n        baseMeshMaterial\n      );\n      this.scene.add(base);\n      // active.push(base);\n      base.translateX(mapDistanceToInternal(tile.coordinates.x));\n      base.translateZ(mapDistanceToInternal(tile.coordinates.y));\n    });\n\n    // Instantiate a loader\n    var loader = new GLTFLoader();\n\n    var dracoLoader = new DRACOLoader();\n    dracoLoader.setDecoderPath(\"/examples/js/libs/draco/\");\n    loader.setDRACOLoader(dracoLoader);\n\n    // Load a glTF resource\n    loader.load(\n      // resource URL\n      \"models/joeytown-sign.glb\",\n      // called when the resource is loaded\n      (gltf) => {\n        gltf.scene.scale.set(40, 40, 40);\n        gltf.scene.translateY(-30);\n        gltf.scene.translateX(-10);\n        gltf.scene.translateZ(15.5);\n        this.scene.add(gltf.scene);\n        console.log(\"loaded!\");\n      },\n      // called while loading is progressing\n      function (xhr) {\n        console.log((xhr.loaded / xhr.total) * 100 + \"% loaded\");\n      },\n      // called when loading has errors\n      function (error) {\n        console.log(\"An error happened\");\n      }\n    );\n  }\n\n  animate(): void {\n    this.controls.update();\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  setupCamera(\n    aspect: number,\n    d: number,\n    scene: Scene,\n    renderer: any\n  ): { camera: any; controls: any } {\n    const camera = new PerspectiveCamera(d, aspect, 1, 1000);\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled\n    controls.dampingFactor = 0.005;\n    controls.screenSpacePanning = false;\n    controls.minDistance = 100;\n    controls.maxDistance = 500;\n    controls.maxPolarAngle = Math.PI / 2;\n    controls.autoRotate = true;\n    controls.autoRotateSpeed = 0.5;\n\n    camera.position.set(50, 50, -50);\n    camera.lookAt(scene.position);\n    controls.update();\n\n    return {\n      camera,\n      controls,\n    };\n  }\n\n  setUpRenderer(\n    canvas: HTMLCanvasElement,\n    context: WebGL2RenderingContext,\n    canvasBoundingRect: DOMRect\n  ): { renderer: any } {\n    const renderer = new WebGLRenderer({\n      canvas,\n      context,\n    });\n\n    // Fix for retina\n    renderer.setPixelRatio(2);\n\n    renderer.setSize(canvasBoundingRect.width, canvasBoundingRect.height);\n    renderer.xr.enabled = true;\n\n    return {\n      renderer,\n    };\n  }\n\n  setupLighting(scene: Scene) {\n    const sunlight = 0xffffff;\n    var light = new HemisphereLight(sunlight, sunlight, 1);\n    scene.add(light);\n\n    var dirLight = new DirectionalLight(sunlight, 0.2);\n    dirLight.position.multiplyScalar(500);\n    dirLight.position.setX(150);\n    scene.add(dirLight);\n  }\n\n  render() {\n    return <canvas ref={this.townCanvas} className=\"TownCanvas\"></canvas>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}